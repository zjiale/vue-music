/*!
 * better-scroll / pull-down
 * (c) 2016-2019 ustbhuangyi
 * Released under the MIT License.
 */
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = global || self, global.PullDown = factory());
}(this, function () { 'use strict';

  var Direction;
  (function (Direction) {
      Direction[Direction["Positive"] = 1] = "Positive";
      Direction[Direction["Negative"] = -1] = "Negative";
      Direction[Direction["Default"] = 0] = "Default";
  })(Direction || (Direction = {}));

  var Probe;
  (function (Probe) {
      Probe[Probe["Default"] = 0] = "Default";
      Probe[Probe["Throttle"] = 1] = "Throttle";
      Probe[Probe["Normal"] = 2] = "Normal";
      Probe[Probe["Realtime"] = 3] = "Realtime";
  })(Probe || (Probe = {}));

  var ease = {
      // easeOutQuint
      swipe: {
          style: 'cubic-bezier(0.23, 1, 0.32, 1)',
          fn: function (t) {
              return 1 + --t * t * t * t * t;
          }
      },
      // easeOutQuard
      swipeBounce: {
          style: 'cubic-bezier(0.25, 0.46, 0.45, 0.94)',
          fn: function (t) {
              return t * (2 - t);
          }
      },
      // easeOutQuart
      bounce: {
          style: 'cubic-bezier(0.165, 0.84, 0.44, 1)',
          fn: function (t) {
              return 1 - --t * t * t * t;
          }
      }
  };

  var sourcePrefix = 'plugins.pullDownRefresh';
  var propertiesMap = [
      {
          key: 'finishPullDown',
          name: 'finish'
      },
      {
          key: 'openPullDown',
          name: 'open'
      },
      {
          key: 'closePullDown',
          name: 'close'
      },
      {
          key: 'autoPullDownRefresh',
          name: 'autoPull'
      }
  ];
  var propertiesProxyConfig = propertiesMap.map(function (item) {
      return {
          key: item.key,
          sourceKey: sourcePrefix + "." + item.name
      };
  });

  var PullDown = /** @class */ (function () {
      function PullDown(scroll) {
          this.scroll = scroll;
          this.pulling = false;
          if (scroll.options.pullDownRefresh) {
              this._watch();
          }
          this.scroll.registerType(['pullingDown']);
          this.scroll.proxy(propertiesProxyConfig);
      }
      PullDown.prototype._watch = function () {
          // 需要设置 probe = 3 吗？
          // must watch scroll in real time
          this.scroll.options.probeType = Probe.Realtime;
          this.scroll.scroller.hooks.on('end', this._checkPullDown, this);
      };
      PullDown.prototype._checkPullDown = function () {
          if (!this.scroll.options.pullDownRefresh) {
              return;
          }
          var _a = this.scroll.options
              .pullDownRefresh, _b = _a.threshold, threshold = _b === void 0 ? 90 : _b, _c = _a.stop, stop = _c === void 0 ? 40 : _c;
          // check if a real pull down action
          if (this.scroll.directionY !== Direction.Negative ||
              this.scroll.y < threshold) {
              return false;
          }
          if (!this.pulling) {
              this.pulling = true;
              this.scroll.trigger('pullingDown');
              this.originalMinScrollY = this.scroll.minScrollY;
              this.scroll.minScrollY = stop;
          }
          this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
          return this.pulling;
      };
      PullDown.prototype.finish = function () {
          this.pulling = false;
          this.scroll.minScrollY = this.originalMinScrollY;
          this.scroll.resetPosition(this.scroll.options.bounceTime, ease.bounce);
      };
      PullDown.prototype.open = function (config) {
          if (config === void 0) { config = true; }
          this.scroll.options.pullDownRefresh = config;
          this._watch();
      };
      PullDown.prototype.close = function () {
          this.scroll.options.pullDownRefresh = false;
      };
      PullDown.prototype.autoPull = function () {
          var _a = this.scroll.options
              .pullDownRefresh, _b = _a.threshold, threshold = _b === void 0 ? 90 : _b, _c = _a.stop, stop = _c === void 0 ? 40 : _c;
          if (this.pulling) {
              return;
          }
          this.pulling = true;
          this.originalMinScrollY = this.scroll.minScrollY;
          this.scroll.minScrollY = threshold;
          this.scroll.scrollTo(this.scroll.x, threshold);
          this.scroll.trigger('pullingDown');
          this.scroll.scrollTo(this.scroll.x, stop, this.scroll.options.bounceTime, ease.bounce);
      };
      PullDown.pluginName = 'pullDownRefresh';
      return PullDown;
  }());

  return PullDown;

}));
