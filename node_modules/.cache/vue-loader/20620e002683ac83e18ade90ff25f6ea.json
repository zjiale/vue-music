{"remainingRequest":"E:\\vue-music\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue-music\\src\\components\\rank\\rank.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue-music\\src\\components\\rank\\rank.vue","mtime":1571192629465},{"path":"E:\\vue-music\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Scroll from 'base/scroll/scroll'\r\nimport Loading from 'base/loading/loading'\r\nimport { getTopList } from 'api/rank'\r\nimport { ERR_OK } from 'api/config'\r\nimport { playlistMixin } from 'common/js/mixin'\r\nimport { mapMutations } from 'vuex'\r\n\r\nexport default {\r\n  mixins: [playlistMixin],\r\n  created () {\r\n    this._getTopList()\r\n  },\r\n  data () {\r\n    return {\r\n      topList: []\r\n    }\r\n  },\r\n  methods: {\r\n    handlePlaylist (playlist) {\r\n      const bottom = playlist.length > 0 ? '60px' : 0\r\n\r\n      this.$refs.rank.style.bottom = bottom\r\n      this.$refs.toplist.refresh()\r\n    },\r\n    selectItem (item) {\r\n      this.$router.push({\r\n        path: `/rank/${item.topId}`\r\n      })\r\n      this.setTopList(item)\r\n    },\r\n    _getTopList () {\r\n      getTopList().then((res) => {\r\n        if (res.code === ERR_OK) {\r\n          let ret = []\r\n\r\n          let topListGroup = res.req_0.data.group\r\n\r\n          topListGroup.forEach((topList) => {\r\n            topList.toplist.forEach((list) => {\r\n              ret.push(list)\r\n            })\r\n          })\r\n          var info = ret.filter(function (item, index, array) {\r\n            return item.topId < 100\r\n          })\r\n          this.topList = info\r\n        }\r\n      })\r\n    },\r\n    ...mapMutations({\r\n      setTopList: 'SET_TOP_LIST'\r\n    })\r\n  },\r\n  components: {\r\n    Scroll,\r\n    Loading\r\n  }\r\n}\r\n",{"version":3,"sources":["rank.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"rank.vue","sourceRoot":"src/components/rank","sourcesContent":["<template>\r\n  <div class=\"rank\" ref=\"rank\">\r\n    <scroll :data=\"topList\" class=\"toplist\" ref=\"toplist\">\r\n      <ul>\r\n        <li class=\"item\" v-for=\"(item,index) in topList\" :key=\"index\" @click=\"selectItem(item)\">\r\n          <div class=\"icon\">\r\n            <img width=\"100\" height=\"100\" v-lazy=\"item.frontPicUrl\" />\r\n          </div>\r\n          <ul class=\"songlist\">\r\n            <h3 class=\"title\">{{item.title}}</h3>\r\n            <li class=\"song\" v-for=\"(info,index) in item.song\" :key=\"index\">\r\n              <span>{{index+1}}.</span>\r\n              <span>{{info.title}} -</span>\r\n              <span>{{info.singerName}}</span>\r\n            </li>\r\n          </ul>\r\n        </li>\r\n      </ul>\r\n      <div class=\"loading-container\" v-show=\"!topList.length\">\r\n        <loading></loading>\r\n      </div>\r\n    </scroll>\r\n    <router-view></router-view>\r\n  </div>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\nimport Scroll from 'base/scroll/scroll'\r\nimport Loading from 'base/loading/loading'\r\nimport { getTopList } from 'api/rank'\r\nimport { ERR_OK } from 'api/config'\r\nimport { playlistMixin } from 'common/js/mixin'\r\nimport { mapMutations } from 'vuex'\r\n\r\nexport default {\r\n  mixins: [playlistMixin],\r\n  created () {\r\n    this._getTopList()\r\n  },\r\n  data () {\r\n    return {\r\n      topList: []\r\n    }\r\n  },\r\n  methods: {\r\n    handlePlaylist (playlist) {\r\n      const bottom = playlist.length > 0 ? '60px' : 0\r\n\r\n      this.$refs.rank.style.bottom = bottom\r\n      this.$refs.toplist.refresh()\r\n    },\r\n    selectItem (item) {\r\n      this.$router.push({\r\n        path: `/rank/${item.topId}`\r\n      })\r\n      this.setTopList(item)\r\n    },\r\n    _getTopList () {\r\n      getTopList().then((res) => {\r\n        if (res.code === ERR_OK) {\r\n          let ret = []\r\n\r\n          let topListGroup = res.req_0.data.group\r\n\r\n          topListGroup.forEach((topList) => {\r\n            topList.toplist.forEach((list) => {\r\n              ret.push(list)\r\n            })\r\n          })\r\n          var info = ret.filter(function (item, index, array) {\r\n            return item.topId < 100\r\n          })\r\n          this.topList = info\r\n        }\r\n      })\r\n    },\r\n    ...mapMutations({\r\n      setTopList: 'SET_TOP_LIST'\r\n    })\r\n  },\r\n  components: {\r\n    Scroll,\r\n    Loading\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\r\n@import '~common/stylus/variable'\r\n@import '~common/stylus/mixin'\r\n.rank\r\n  position fixed\r\n  width 100%\r\n  top 88px\r\n  bottom 0\r\n  .toplist\r\n    height 100%\r\n    overflow hidden\r\n    .item\r\n      display flex\r\n      margin 0 20px\r\n      padding-top 20px\r\n      height 100px\r\n      &:last-child\r\n        padding-bottom 20px\r\n      .icon\r\n        flex 0 0 100px\r\n        width 100px\r\n        height 100px\r\n      .songlist\r\n        flex 1\r\n        display flex\r\n        flex-direction column\r\n        justify-content center\r\n        padding 0 20px\r\n        height 100px\r\n        overflow hidden\r\n        background $color-highlight-background\r\n        color $color-text-d\r\n        font-size $font-size-small\r\n        .title\r\n          font-size 16px\r\n          font-weight 400\r\n          color #fff\r\n          margin 5px 0\r\n        .song\r\n          no-wrap()\r\n          line-height 26px\r\n    .loading-container\r\n      position absolute\r\n      width 100%\r\n      top 50%\r\n      transform translateY(-50%)\r\n</style>"]}]}