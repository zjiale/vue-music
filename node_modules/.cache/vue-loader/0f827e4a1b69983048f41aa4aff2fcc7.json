{"remainingRequest":"E:\\vue-music\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\vue-music\\src\\base\\listview\\listview.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\vue-music\\src\\base\\listview\\listview.vue","mtime":1565768212387},{"path":"E:\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport Scroll from 'base/scroll/scroll'\r\nimport Loading from 'base/loading/loading'\r\nimport { getData } from 'common/js/dom'\r\n\r\nconst ANCHOR_HEIGHT = 18\r\nconst TITLE_HEIGHT = 30\r\n\r\nexport default {\r\n  created() {\r\n    this.touch = {}\r\n    this.listenScroll = true\r\n    this.listHeight = []\r\n    this.probeType = 3\r\n  },\r\n  data() {\r\n    return {\r\n      scrollY: -1,\r\n      currentIndex: 0,\r\n      diff: -1\r\n    }\r\n  },\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  computed: {\r\n    shortcutList() {\r\n      // map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\r\n      return this.data.map((group) => {\r\n        return group.title.substr(0, 1)\r\n      })\r\n    },\r\n    fixedTitle() {\r\n      if (this.scrollY > 0) {\r\n        return ''\r\n      }\r\n      return this.data[this.currentIndex] ? this.data[this.currentIndex].title : ''\r\n    }\r\n  },\r\n  methods: {\r\n    selectItem(item) {\r\n      this.$emit('select', item)\r\n    },\r\n    onShortcutTouchStart(e) {\r\n      let anchorIndex = getData(e.target, 'index')\r\n      let firstTouch = e.touches[0]\r\n      this.touch.y1 = firstTouch.pageY\r\n      this.touch.anchorIndex = anchorIndex\r\n      // 右侧得滑动入口index和左边得listgroup得index相等才能跳到相应的区块\r\n      this._scrollTo(anchorIndex)\r\n    },\r\n    onShortcutTouchMove(e) {\r\n      let firstTouch = e.touches[0]\r\n      this.touch.y2 = firstTouch.pageY\r\n      // |0为向下取整,delta为偏移得锚点个数\r\n      let delta = (this.touch.y2 - this.touch.y1) / ANCHOR_HEIGHT | 0\r\n      // anchorIndex为最终得移动终点\r\n      let anchorIndex = parseInt(this.touch.anchorIndex) + delta\r\n      this._scrollTo(anchorIndex)\r\n    },\r\n    scroll(pos) {\r\n      this.scrollY = pos.y\r\n    },\r\n    _scrollTo(index) {\r\n      if (!index && index !== 0) {\r\n        return\r\n      }\r\n      if (index < 0) {\r\n        index = 0\r\n      } else if (index > this.listHeight.length - 2) {\r\n        index = this.listHeight.length - 2\r\n      }\r\n      this.scrollY = -this.listHeight[index]\r\n      this.$refs.listview.scrollToElement(this.$refs.listGroup[index], 0)\r\n    },\r\n    _calculateHeight() {\r\n      this.listHeight = []\r\n      const list = this.$refs.listGroup\r\n      let height = 0\r\n      this.listHeight.push(height)\r\n      for (let i = 0; i < list.length; i++) {\r\n        let item = list[i]\r\n        height += item.clientHeight\r\n        this.listHeight.push(height)\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    data() {\r\n      setTimeout(() => {\r\n        this._calculateHeight()\r\n      }, 20)\r\n    },\r\n    scrollY(newY) {\r\n      const listHeight = this.listHeight\r\n      // 挡滚动到顶部 newY>0\r\n      if (newY > 0) {\r\n        this.currentIndex = 0\r\n        return\r\n      }\r\n      // 在中间部分滚动\r\n      for (let i = 0; i < listHeight.length - 1; i++) {\r\n        let height1 = listHeight[i]\r\n        let height2 = listHeight[i + 1]\r\n        /*\r\n          !height2为滑动到最后一个没有下限了\r\n          -newY为往上滑动时值是为负数所以要加“-”\r\n        */\r\n        if (-newY >= height1 && -newY < height2) {\r\n          this.currentIndex = i\r\n          this.diff = height2 + newY\r\n          return\r\n        }\r\n      }\r\n      // 当滚动到底部，且-newY大于最后一个元素得上限\r\n      this.currentIndex = listHeight.length - 2\r\n    },\r\n    diff(newVal) {\r\n      let fixedTop = (newVal > 0 && newVal < TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : 0\r\n      if (this.fixedTop === fixedTop) {\r\n        return\r\n      }\r\n      this.fixedTop = fixedTop\r\n      this.$refs.fixed.style.transform = `translate3d(0, ${fixedTop}px, 0)`\r\n    }\r\n  },\r\n  components: {\r\n    Scroll,\r\n    Loading\r\n  }\r\n}\r\n",{"version":3,"sources":["listview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwfile":"listview.vue","sourceRoot":"src/base/listview","sourcesContent":["<template>\r\n  <scroll class=\"listview\"\r\n          :data=\"data\"\r\n          ref=\"listview\"\r\n          :listenScroll=\"listenScroll\"\r\n          :probeType=\"probeType\"\r\n          @scroll=\"scroll\"\r\n          >\r\n    <ul>\r\n      <li v-for=\"(group, index) in data\" :key=\"index\" class=\"list-group\" ref=\"listGroup\">\r\n        <h2 class=\"list-group-title\">{{group.title}}</h2>\r\n        <ul>\r\n          <li @click=\"selectItem(item)\" v-for=\"item in group.items\" :key=\"item.id\" class=\"list-group-item\">\r\n            <img class=\"avatar\" v-lazy=\"item.avatar\" />\r\n            <span class=\"name\">{{item.name}}</span>\r\n          </li>\r\n        </ul>\r\n      </li>\r\n    </ul>\r\n    <div class=\"list-shortcut\" @touchstart=\"onShortcutTouchStart\" @touchmove.stop.prevent=\"onShortcutTouchMove\">\r\n        <ul>\r\n            <li v-for=\"(item, index) in shortcutList\" :key=\"index\"\r\n                class=\"item\"\r\n                :class=\"{'current': currentIndex === index}\"\r\n                :data-index=\"index\"\r\n                >\r\n                {{item}}\r\n            </li>\r\n        </ul>\r\n    </div>\r\n    <div class=\"list-fixed\" v-show=\"fixedTitle\" ref=\"fixed\">\r\n      <h1 class=\"fixed-title\">{{fixedTitle}}</h1>\r\n    </div>\r\n    <div v-show=\"!data.length\" class=\"loading-container\">\r\n      <loading></loading>\r\n    </div>\r\n  </scroll>\r\n</template>\r\n\r\n<script type=\"text/ecmascript-6\">\r\nimport Scroll from 'base/scroll/scroll'\r\nimport Loading from 'base/loading/loading'\r\nimport { getData } from 'common/js/dom'\r\n\r\nconst ANCHOR_HEIGHT = 18\r\nconst TITLE_HEIGHT = 30\r\n\r\nexport default {\r\n  created() {\r\n    this.touch = {}\r\n    this.listenScroll = true\r\n    this.listHeight = []\r\n    this.probeType = 3\r\n  },\r\n  data() {\r\n    return {\r\n      scrollY: -1,\r\n      currentIndex: 0,\r\n      diff: -1\r\n    }\r\n  },\r\n  props: {\r\n    data: {\r\n      type: Array,\r\n      default: () => []\r\n    }\r\n  },\r\n  computed: {\r\n    shortcutList() {\r\n      // map() 方法返回一个新数组，数组中的元素为原始数组元素调用函数处理后的值\r\n      return this.data.map((group) => {\r\n        return group.title.substr(0, 1)\r\n      })\r\n    },\r\n    fixedTitle() {\r\n      if (this.scrollY > 0) {\r\n        return ''\r\n      }\r\n      return this.data[this.currentIndex] ? this.data[this.currentIndex].title : ''\r\n    }\r\n  },\r\n  methods: {\r\n    selectItem(item) {\r\n      this.$emit('select', item)\r\n    },\r\n    onShortcutTouchStart(e) {\r\n      let anchorIndex = getData(e.target, 'index')\r\n      let firstTouch = e.touches[0]\r\n      this.touch.y1 = firstTouch.pageY\r\n      this.touch.anchorIndex = anchorIndex\r\n      // 右侧得滑动入口index和左边得listgroup得index相等才能跳到相应的区块\r\n      this._scrollTo(anchorIndex)\r\n    },\r\n    onShortcutTouchMove(e) {\r\n      let firstTouch = e.touches[0]\r\n      this.touch.y2 = firstTouch.pageY\r\n      // |0为向下取整,delta为偏移得锚点个数\r\n      let delta = (this.touch.y2 - this.touch.y1) / ANCHOR_HEIGHT | 0\r\n      // anchorIndex为最终得移动终点\r\n      let anchorIndex = parseInt(this.touch.anchorIndex) + delta\r\n      this._scrollTo(anchorIndex)\r\n    },\r\n    scroll(pos) {\r\n      this.scrollY = pos.y\r\n    },\r\n    _scrollTo(index) {\r\n      if (!index && index !== 0) {\r\n        return\r\n      }\r\n      if (index < 0) {\r\n        index = 0\r\n      } else if (index > this.listHeight.length - 2) {\r\n        index = this.listHeight.length - 2\r\n      }\r\n      this.scrollY = -this.listHeight[index]\r\n      this.$refs.listview.scrollToElement(this.$refs.listGroup[index], 0)\r\n    },\r\n    _calculateHeight() {\r\n      this.listHeight = []\r\n      const list = this.$refs.listGroup\r\n      let height = 0\r\n      this.listHeight.push(height)\r\n      for (let i = 0; i < list.length; i++) {\r\n        let item = list[i]\r\n        height += item.clientHeight\r\n        this.listHeight.push(height)\r\n      }\r\n    }\r\n  },\r\n  watch: {\r\n    data() {\r\n      setTimeout(() => {\r\n        this._calculateHeight()\r\n      }, 20)\r\n    },\r\n    scrollY(newY) {\r\n      const listHeight = this.listHeight\r\n      // 挡滚动到顶部 newY>0\r\n      if (newY > 0) {\r\n        this.currentIndex = 0\r\n        return\r\n      }\r\n      // 在中间部分滚动\r\n      for (let i = 0; i < listHeight.length - 1; i++) {\r\n        let height1 = listHeight[i]\r\n        let height2 = listHeight[i + 1]\r\n        /*\r\n          !height2为滑动到最后一个没有下限了\r\n          -newY为往上滑动时值是为负数所以要加“-”\r\n        */\r\n        if (-newY >= height1 && -newY < height2) {\r\n          this.currentIndex = i\r\n          this.diff = height2 + newY\r\n          return\r\n        }\r\n      }\r\n      // 当滚动到底部，且-newY大于最后一个元素得上限\r\n      this.currentIndex = listHeight.length - 2\r\n    },\r\n    diff(newVal) {\r\n      let fixedTop = (newVal > 0 && newVal < TITLE_HEIGHT) ? newVal - TITLE_HEIGHT : 0\r\n      if (this.fixedTop === fixedTop) {\r\n        return\r\n      }\r\n      this.fixedTop = fixedTop\r\n      this.$refs.fixed.style.transform = `translate3d(0, ${fixedTop}px, 0)`\r\n    }\r\n  },\r\n  components: {\r\n    Scroll,\r\n    Loading\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped lang=\"stylus\" rel=\"stylesheet/stylus\">\r\n@import '~common/stylus/variable'\r\n\r\n.listview {\r\n  position: relative\r\n  width: 100%\r\n  height: 100%\r\n  overflow: hidden\r\n  background: $color-background\r\n\r\n  .list-group {\r\n    padding-bottom: 30px\r\n\r\n    .list-group-title {\r\n      height: 30px\r\n      line-height: 30px\r\n      padding-left: 20px\r\n      font-size: $font-size-small\r\n      color: $color-text-l\r\n      background: $color-highlight-background\r\n    }\r\n\r\n    .list-group-item {\r\n      display: flex\r\n      align-items: center\r\n      padding: 20px 0 0 30px\r\n\r\n      .avatar {\r\n        width: 50px\r\n        height: 50px\r\n        border-radius: 50%\r\n      }\r\n\r\n      .name {\r\n        margin-left: 20px\r\n        color: $color-text-l\r\n        font-size: $font-size-medium\r\n      }\r\n    }\r\n  }\r\n\r\n  .list-shortcut {\r\n    position: absolute\r\n    z-index: 30\r\n    right: 0\r\n    top: 50%\r\n    transform: translateY(-50%)\r\n    width: 20px\r\n    padding: 20px 0\r\n    border-radius: 10px\r\n    text-align: center\r\n    background: $color-background-d\r\n    font-family: Helvetica\r\n\r\n    .item {\r\n      padding: 3px\r\n      line-height: 1\r\n      color: $color-text-l\r\n      font-size: $font-size-small\r\n\r\n      &.current {\r\n        color: $color-theme\r\n      }\r\n    }\r\n  }\r\n\r\n  .list-fixed {\r\n    position: absolute\r\n    top: 0\r\n    left: 0\r\n    width: 100%\r\n\r\n    .fixed-title {\r\n      height: 30px\r\n      line-height: 30px\r\n      padding-left: 20px\r\n      font-size: $font-size-small\r\n      color: $color-text-l\r\n      background: $color-highlight-background\r\n    }\r\n  }\r\n\r\n  .loading-container {\r\n    position: absolute\r\n    width: 100%\r\n    top: 50%\r\n    transform: translateY(-50%)\r\n  }\r\n}\r\n</style>\r\n"]}]}