{"remainingRequest":"E:\\vue-music\\node_modules\\thread-loader\\dist\\cjs.js!E:\\vue-music\\node_modules\\babel-loader\\lib\\index.js!E:\\vue-music\\node_modules\\eslint-loader\\index.js??ref--13-0!E:\\vue-music\\src\\common\\js\\dom.js","dependencies":[{"path":"E:\\vue-music\\src\\common\\js\\dom.js","mtime":1566207353550},{"path":"E:\\vue-music\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"E:\\vue-music\\node_modules\\eslint-loader\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.constructor\";\nimport \"core-js/modules/es6.regexp.split\";\nexport function addClass(el, className) {\n  if (hasClass(el, className)) {\n    return;\n  }\n\n  var newClass = el.className.split(' ');\n  newClass.push(className);\n  el.className = newClass.join(' ');\n}\nexport function hasClass(el, className) {\n  var reg = new RegExp('(^|\\\\s)' + className + '(\\\\s|$)');\n  return reg.test(el.className);\n}\nexport function getData(el, name, val) {\n  var prefix = 'data-';\n  name = prefix + name;\n\n  if (val) {\n    // setAttribute() 方法添加指定的属性，并为其赋指定的值\n    return el.setAttribute(name, val);\n  } else {\n    return el.getAttribute(name);\n  }\n} // 创建一个空的 div 并获取它的 style\n\nvar elementStyle = document.createElement('div').style; // 创建一个空div获取里面得style来判断当前浏览器符合哪个供应商\n\nvar vendor = function () {\n  var transformNames = {\n    webkit: 'webkitTransform',\n    // 火狐\n    Moz: 'MozTransform',\n    // opera\n    O: 'OTransform',\n    // ie\n    ms: 'msTransform',\n    standard: 'transform'\n  };\n\n  for (var key in transformNames) {\n    if (elementStyle[transformNames[key]] !== undefined) {\n      return key;\n    }\n  }\n\n  return false;\n}();\n\nexport function prefixStyle(style) {\n  if (vendor === false) {\n    return false;\n  }\n\n  if (vendor === 'standard') {\n    return style;\n  } // charAt(0).toUpperCase为首字母大写\n\n\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1);\n}",{"version":3,"sources":["E:\\vue-music\\src\\common\\js\\dom.js"],"names":["addClass","el","className","hasClass","newClass","split","push","join","reg","RegExp","test","getData","name","val","prefix","setAttribute","getAttribute","elementStyle","document","createElement","style","vendor","transformNames","webkit","Moz","O","ms","standard","key","undefined","prefixStyle","charAt","toUpperCase","substr"],"mappings":";;AAAA,OAAO,SAASA,QAAT,CAAkBC,EAAlB,EAAsBC,SAAtB,EAAiC;AACtC,MAAIC,QAAQ,CAACF,EAAD,EAAKC,SAAL,CAAZ,EAA6B;AAC3B;AACD;;AACD,MAAIE,QAAQ,GAAGH,EAAE,CAACC,SAAH,CAAaG,KAAb,CAAmB,GAAnB,CAAf;AACAD,EAAAA,QAAQ,CAACE,IAAT,CAAcJ,SAAd;AACAD,EAAAA,EAAE,CAACC,SAAH,GAAeE,QAAQ,CAACG,IAAT,CAAc,GAAd,CAAf;AACD;AAED,OAAO,SAASJ,QAAT,CAAkBF,EAAlB,EAAsBC,SAAtB,EAAiC;AACtC,MAAIM,GAAG,GAAG,IAAIC,MAAJ,CAAW,YAAYP,SAAZ,GAAwB,SAAnC,CAAV;AACA,SAAOM,GAAG,CAACE,IAAJ,CAAST,EAAE,CAACC,SAAZ,CAAP;AACD;AAED,OAAO,SAASS,OAAT,CAAiBV,EAAjB,EAAqBW,IAArB,EAA2BC,GAA3B,EAAgC;AACrC,MAAMC,MAAM,GAAG,OAAf;AACAF,EAAAA,IAAI,GAAGE,MAAM,GAAGF,IAAhB;;AACA,MAAIC,GAAJ,EAAS;AACP;AACA,WAAOZ,EAAE,CAACc,YAAH,CAAgBH,IAAhB,EAAsBC,GAAtB,CAAP;AACD,GAHD,MAGO;AACL,WAAOZ,EAAE,CAACe,YAAH,CAAgBJ,IAAhB,CAAP;AACD;AACF,C,CAED;;AACA,IAAIK,YAAY,GAAGC,QAAQ,CAACC,aAAT,CAAuB,KAAvB,EAA8BC,KAAjD,C,CAEA;;AACA,IAAIC,MAAM,GAAI,YAAM;AAClB,MAAIC,cAAc,GAAG;AACnBC,IAAAA,MAAM,EAAE,iBADW;AAEnB;AACAC,IAAAA,GAAG,EAAE,cAHc;AAInB;AACAC,IAAAA,CAAC,EAAE,YALgB;AAMnB;AACAC,IAAAA,EAAE,EAAE,aAPe;AAQnBC,IAAAA,QAAQ,EAAE;AARS,GAArB;;AAWA,OAAK,IAAIC,GAAT,IAAgBN,cAAhB,EAAgC;AAC9B,QAAIL,YAAY,CAACK,cAAc,CAACM,GAAD,CAAf,CAAZ,KAAsCC,SAA1C,EAAqD;AACnD,aAAOD,GAAP;AACD;AACF;;AAED,SAAO,KAAP;AACD,CAnBY,EAAb;;AAqBA,OAAO,SAASE,WAAT,CAAqBV,KAArB,EAA4B;AACjC,MAAIC,MAAM,KAAK,KAAf,EAAsB;AACpB,WAAO,KAAP;AACD;;AAED,MAAIA,MAAM,KAAK,UAAf,EAA2B;AACzB,WAAOD,KAAP;AACD,GAPgC,CAQjC;;;AACA,SAAOC,MAAM,GAAGD,KAAK,CAACW,MAAN,CAAa,CAAb,EAAgBC,WAAhB,EAAT,GAAyCZ,KAAK,CAACa,MAAN,CAAa,CAAb,CAAhD;AACD","sourcesContent":["export function addClass(el, className) {\r\n  if (hasClass(el, className)) {\r\n    return\r\n  }\r\n  let newClass = el.className.split(' ')\r\n  newClass.push(className)\r\n  el.className = newClass.join(' ')\r\n}\r\n\r\nexport function hasClass(el, className) {\r\n  let reg = new RegExp('(^|\\\\s)' + className + '(\\\\s|$)')\r\n  return reg.test(el.className)\r\n}\r\n\r\nexport function getData(el, name, val) {\r\n  const prefix = 'data-'\r\n  name = prefix + name\r\n  if (val) {\r\n    // setAttribute() 方法添加指定的属性，并为其赋指定的值\r\n    return el.setAttribute(name, val)\r\n  } else {\r\n    return el.getAttribute(name)\r\n  }\r\n}\r\n\r\n// 创建一个空的 div 并获取它的 style\r\nlet elementStyle = document.createElement('div').style\r\n\r\n// 创建一个空div获取里面得style来判断当前浏览器符合哪个供应商\r\nlet vendor = (() => {\r\n  let transformNames = {\r\n    webkit: 'webkitTransform',\r\n    // 火狐\r\n    Moz: 'MozTransform',\r\n    // opera\r\n    O: 'OTransform',\r\n    // ie\r\n    ms: 'msTransform',\r\n    standard: 'transform'\r\n  }\r\n\r\n  for (let key in transformNames) {\r\n    if (elementStyle[transformNames[key]] !== undefined) {\r\n      return key\r\n    }\r\n  }\r\n\r\n  return false\r\n})()\r\n\r\nexport function prefixStyle(style) {\r\n  if (vendor === false) {\r\n    return false\r\n  }\r\n\r\n  if (vendor === 'standard') {\r\n    return style\r\n  }\r\n  // charAt(0).toUpperCase为首字母大写\r\n  return vendor + style.charAt(0).toUpperCase() + style.substr(1)\r\n}"]}]}